`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: UCD
// Engineer: Refaey
// 
// Create Date: 01/05/2020 10:06:23 AM
// Design Name: UART_Single_Block
// Module Name: 1111
// Project Name: TDC
// Target Devices: XC7A-200T
// Revision 0.03 - File Created

//////////////////////////////////////////////////////////////////////////////////

module UART (
  input clk,
  input rst,
  input [7:0] tx_data,
  output reg tx_en,
  output reg [7:0] rx_data,
  input rx_en
);

reg [2:0] tx_state, rx_state;
reg [15:0] bit_counter;

// Constants for the bit periods in clock cycles
parameter BIT_PERIOD = 8,
          START_BIT_PERIOD = 16,
          STOP_BIT_PERIOD = 24;

// Constants for the states
parameter IDLE = 3'b000,
          TX_START_BIT = 3'b001,
          TX_DATA_BITS = 3'b010,
          TX_STOP_BIT = 3'b011,
          RX_START_BIT = 3'b100,
          RX_DATA_BITS = 3'b101,
          RX_STOP_BIT = 3'b110;

// Initialize state registers
always @(posedge clk or negedge rst) begin
  if (~rst) begin
    tx_state <= IDLE;
    rx_state <= IDLE;
  end else begin
    tx_state <= tx_state;
    rx_state <= rx_state;
  end
end

// Transmit state machine
always @(posedge clk) begin
  case (tx_state)
    IDLE: begin
      tx_en <= 0;
      if (tx_data != 0) begin
        tx_state <= TX_START_BIT;
        bit_counter <= START_BIT_PERIOD;
      end
    end
    TX_START_BIT: begin
      tx_en <= 0;
      bit_counter <= bit_counter - 1;
      if (bit_counter == 0) begin
        tx_state <= TX_DATA_BITS;
        bit_counter <= BIT_PERIOD;
      end
    end
    TX_DATA_BITS: begin
      tx_en <= 1;
      bit_counter <= bit_counter - 1;
      if (bit_counter == 0) begin
        tx_state <= TX_STOP_BIT;
        bit_counter <= STOP_BIT_PERIOD;
      end
    end
    TX_STOP_BIT: begin
      tx_en <= 1;
      bit_counter <= bit_counter - 1;
      if (bit_counter == 0) begin
        tx_state <= IDLE;
      end
    end
  endcase
end

// Receive state machine
always @(posedge clk) begin
  case (rx_state)
    IDLE: begin
      if (rx_en) begin
        rx_state <= RX_START_BIT;
        bit_counter <= START_BIT_PERIOD;
      end
    end
    RX_START_BIT: begin
      bit_counter <= bit_counter - 1;
      if (bit_counter == 0) begin
        rx_state <= RX_DATA_BITS;
        bit_counter <= BIT_PERIOD;
      end

//Done
